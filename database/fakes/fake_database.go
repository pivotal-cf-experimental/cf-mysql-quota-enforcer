// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf-experimental/cf-mysql-quota-enforcer/database"
)

type FakeDatabase struct {
	GrantPrivilegesStub        func() error
	grantPrivilegesMutex       sync.RWMutex
	grantPrivilegesArgsForCall []struct{}
	grantPrivilegesReturns     struct {
		result1 error
	}
	RevokePrivilegesStub        func() error
	revokePrivilegesMutex       sync.RWMutex
	revokePrivilegesArgsForCall []struct{}
	revokePrivilegesReturns     struct {
		result1 error
	}
	ResetActivePrivilegesStub        func() error
	resetActivePrivilegesMutex       sync.RWMutex
	resetActivePrivilegesArgsForCall []struct{}
	resetActivePrivilegesReturns     struct {
		result1 error
	}
}

func (fake *FakeDatabase) GrantPrivileges() error {
	fake.grantPrivilegesMutex.Lock()
	fake.grantPrivilegesArgsForCall = append(fake.grantPrivilegesArgsForCall, struct{}{})
	fake.grantPrivilegesMutex.Unlock()
	if fake.GrantPrivilegesStub != nil {
		return fake.GrantPrivilegesStub()
	} else {
		return fake.grantPrivilegesReturns.result1
	}
}

func (fake *FakeDatabase) GrantPrivilegesCallCount() int {
	fake.grantPrivilegesMutex.RLock()
	defer fake.grantPrivilegesMutex.RUnlock()
	return len(fake.grantPrivilegesArgsForCall)
}

func (fake *FakeDatabase) GrantPrivilegesReturns(result1 error) {
	fake.GrantPrivilegesStub = nil
	fake.grantPrivilegesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabase) RevokePrivileges() error {
	fake.revokePrivilegesMutex.Lock()
	fake.revokePrivilegesArgsForCall = append(fake.revokePrivilegesArgsForCall, struct{}{})
	fake.revokePrivilegesMutex.Unlock()
	if fake.RevokePrivilegesStub != nil {
		return fake.RevokePrivilegesStub()
	} else {
		return fake.revokePrivilegesReturns.result1
	}
}

func (fake *FakeDatabase) RevokePrivilegesCallCount() int {
	fake.revokePrivilegesMutex.RLock()
	defer fake.revokePrivilegesMutex.RUnlock()
	return len(fake.revokePrivilegesArgsForCall)
}

func (fake *FakeDatabase) RevokePrivilegesReturns(result1 error) {
	fake.RevokePrivilegesStub = nil
	fake.revokePrivilegesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabase) ResetActivePrivileges() error {
	fake.resetActivePrivilegesMutex.Lock()
	fake.resetActivePrivilegesArgsForCall = append(fake.resetActivePrivilegesArgsForCall, struct{}{})
	fake.resetActivePrivilegesMutex.Unlock()
	if fake.ResetActivePrivilegesStub != nil {
		return fake.ResetActivePrivilegesStub()
	} else {
		return fake.resetActivePrivilegesReturns.result1
	}
}

func (fake *FakeDatabase) ResetActivePrivilegesCallCount() int {
	fake.resetActivePrivilegesMutex.RLock()
	defer fake.resetActivePrivilegesMutex.RUnlock()
	return len(fake.resetActivePrivilegesArgsForCall)
}

func (fake *FakeDatabase) ResetActivePrivilegesReturns(result1 error) {
	fake.ResetActivePrivilegesStub = nil
	fake.resetActivePrivilegesReturns = struct {
		result1 error
	}{result1}
}

var _ database.Database = new(FakeDatabase)
